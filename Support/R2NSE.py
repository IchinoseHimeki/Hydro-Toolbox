'''
File: R^2&NSE.py
File Created: 2022-01-20 14:09:46
Author: IchinoseHimeki (darwinlee19980811@hotmail.com)
-----
Last Modified: 2022-01-20 19:26:21
Modified By: IchinoseHimeki (darwinlee19980811@hotmail.com>)
-----
Copyright 2022
Requisite: Python 3.10+
Description: 
1. Batch extraction of flow data generated by SWAT-CUP; 
2. Calculating R^2(Coefficient of Determination) & NSE(Nash-Sutcliffe Efficiency) referred by https://www.researchgate.net/publication/26438340_Comparison_of_Different_Efficiency_Criteria_for_Hydrologic_Models.
'''

import os
from math import sqrt
from math import pow
import csv

globalPath=os.getcwd()

def r(sim,observe): # R^2 Calculation. 
    
    rValue=0.0
    sumObserve=0.0
    sumSim=0.0
    sum1=0.0
    sum2=0.0
    sum3=0.0
    averageObserve=0.0
    averageSim=0.0
    if not len(sim)==len(observe):
        raise ValueError("The length of sim and observe are not match!")
    else:
        for i in observe:
            sumObserve+=i
        averageObserve=sumObserve/len(observe)
        for i in sim:
            sumSim+=i
        averageSim=sumSim/len(sim)
        for i in range(len(sim)):
            sum1+=(float(observe[i])-float(averageObserve))*(float(sim[i])--float(averageSim))
            sum2+=pow(float(observe[i])-float(averageObserve),2)
            sum3+=pow((float(sim[i])-float(averageSim)),2.0)
    rValue=pow(sum1/(sqrt(sum2)*sqrt(sum3)),2.0)
    return rValue

def nse(sim,observe): # NSE Calculation. 
    
    nseValue=1.0
    sumObserve=0.0
    sum1=0.0
    sum2=0.0
    average=0.0
    
    if not len(sim)==len(observe):
        raise ValueError("The length of sim and observe are not match!")
    else:
        for i in observe:
            sumObserve+=i
        average=sumObserve/len(observe)
        for i in range(len(sim)):
            sum1+=pow(float(observe[i])-float(sim[i]),2)
            sum2+=pow(float(observe[i])-float(average),2)
    nseValue-=(sum1/sum2)
    
    return nseValue

def extractFromObserve(path): # Extract observed data from specific path. 
    
    data=[]
    with open (globalPath+"//"+path,mode="r") as f:
        rawData=f.readlines()
    for i in rawData:
        data.append(float(i.split("\t")[1]))
    return data

def extractFromSim(path): # Extract simulated data from specific path
    
    data=[]
    tempData=[]
    
    with open (globalPath+"//"+path,mode="r") as f:
        rawData=f.readlines()
        for i in rawData:
            if i.startswith(" "):
                if tempData:
                    data.append(tempData)
                tempData=[]
            else:
                tempData.append(float(i.split("  ")[1])) # Convert "1   3.0000e000" into "3.0".
        data.append(tempData)
        
    return data
    
if __name__=="__main__":
    
    result=[]
    
    observeData=extractFromObserve("jingliu2.txt") # Observed Data
    simData=extractFromSim("FLOW_OUT_1.txt") # Simulated Data
    
    for i in range(len(simData)):
        result.append([str(i+1),r(simData[i],observeData),nse(simData[i],observeData)])
        
    with open (globalPath+"//results.csv",mode="a+",newline="") as f: # Output results into csv.
        writer=csv.writer(f)
        writer.writerow(["Sim No.","R^2","NSE"])
        writer.writerows(result)
